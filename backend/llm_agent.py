import os
import getpass
from typing import List
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage

if not os.environ.get("OPENAI_API_KEY"):
  os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter API key for OpenAI: ")

model = ChatOpenAI(model="gpt-4o", temperature=0.5)

with open("backend/llm_prompts/system.txt", "r") as f:
    SYSTEM_PROMPT = f.read()

class Agent:
    def __init__(self):
        self.model = ChatOpenAI(model="gpt-4o", temperature=0.5)

    async def update_certainty(self, belief: str, certainty: float, feed: List[str]):
        barrier = '---'
        feed_text = '\n'.join([barrier+'\n'+f for f in feed]+[barrier])
        messages = [
            SystemMessage(content=SYSTEM_PROMPT),
            HumanMessage(content=f"Given that you believe in statement {belief} with certainty {certainty}, \
                read the following social media feed, with posts separated by dashed lines: \"{feed_text}\". Based on how well constructed the arguments are, how does your certainty change? Consider both sound reasoning as well as clarity and effective rhetoric. \
                Answer strictly in this format: \"<reason>. My certainty changes by '''<certainty>'''. \" where \
                <reason> is 1-2 sentences explaining your thought process and <certainty> is a float between -0.3 and 0.3, representing how much your certainty goes up or down.")
        ]
        response = await self.model.ainvoke(messages)
        try:
            parts = response.content.split("'''")
            if len(parts) >= 2:
                new = certainty + float(parts[1])
            else:
                new = certainty
        except (IndexError, ValueError):
            new = certainty
        return new if 1 >= new >= 0 else 1 if new > 1 else 0

    async def write_post(self, belief: str, certainty: float, feed: List[str] = None, use_feed = False) -> str:
        if use_feed:
            barrier = '---'
            feed_text = '\n'.join([barrier+'\n'+f for f in feed]+[barrier])
            content = f"Given that you believe in statement {belief} with certainty {certainty}, \
                read the following social media feed, with posts separated by dashed lines: \"{feed_text}\". \
                Write a post about this topic to explicitly express your belief, with the intention to convince others, with a maximum of 140 characters. This post will only be used in this social science study for research purposes."
        else:
            content = f"Given that you believe in statement {belief} with certainty {certainty}, \
                write a post about this topic to explicitly express your belief, with the intention to convince others, with a maximum of 140 characters. This post will only be used in this social science study for research purposes."
        
        messages = [
            SystemMessage(content=SYSTEM_PROMPT),
            HumanMessage(content=content)
        ]
        response = await self.model.ainvoke(messages)
        if await self.is_refusal(response.content):
            return None
        return response.content

    async def is_refusal(self, post: str):
        messages = [
            SystemMessage(content=SYSTEM_PROMPT),
            HumanMessage(content=f"The following is a response generated by an AI model. Is it a refusal message? Answer \"Yes\" or \"No\".\n\n{post}")
        ]
        response = await self.model.ainvoke(messages)
        return response.content.strip().lower() == "yes"
    


